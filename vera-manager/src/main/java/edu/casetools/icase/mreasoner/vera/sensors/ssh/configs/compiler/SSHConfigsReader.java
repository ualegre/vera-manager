/* Generated By:JavaCC: Do not edit this line. SSHConfigsReader.java */
package edu.casetools.icase.mreasoner.vera.sensors.ssh.configs.compiler;

import java.io.FileReader;

import edu.casetools.icase.mreasoner.vera.sensors.ssh.configs.SSHConfigs;

@SuppressWarnings("all")
public class SSHConfigsReader implements SSHConfigsReaderConstants {
 public static void main(String[] args) {
try{
SSHConfigsReader parser = new SSHConfigsReader (new FileReader("C:/Interface/configs.txt"));
        parser.readConfigs();

}catch (Exception ex)
{ex.printStackTrace() ;}
}

  final public SSHConfigs readConfigs() throws ParseException {
                           SSHConfigs configs = new SSHConfigs(); String aux = "";
    jj_consume_token(HOSTNAME);
    aux = readString();
    configs.setHostname(aux);
    jj_consume_token(HOSTNAME_END);
    jj_consume_token(PORT);
    aux = readInt();
    configs.setPort(aux);
    jj_consume_token(PORT_END);
    jj_consume_token(USERNAME);
    aux = readString();
    configs.setUsername(aux);
    jj_consume_token(USERNAME_END);
    jj_consume_token(PASSWORD);
    aux = readString();
    configs.setPassword(aux);
    jj_consume_token(PASSWORD_END);
    jj_consume_token(SILENCE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
            configs.setSilence(true);
      break;
    case FALSE:
      jj_consume_token(FALSE);
                    configs.setSilence(false);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SILENCE_END);
    {if (true) return configs;}
    throw new Error("Missing return statement in function");
  }

  final public String readInt() throws ParseException {
 Token name;
 String auxiliar = "";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      name = jj_consume_token(DIGIT);
           auxiliar = auxiliar + name.toString();
    }
{if (true) return auxiliar;}
    throw new Error("Missing return statement in function");
  }

  final public String readString() throws ParseException {
 Token name;
 String auxiliar = "";
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
      case COMMA:
      case TWO_POINT:
      case SLASH:
      case COUNTER_SLASH:
      case LOWER:
      case HIGHER:
      case HYPHEN:
      case UNDERSCORE:
      case DIGIT:
      case ALPHABET:
      case CAPSALPHABET:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGIT:
        name = jj_consume_token(DIGIT);
           auxiliar = auxiliar + name.toString();
        break;
      case ALPHABET:
        name = jj_consume_token(ALPHABET);
           auxiliar = auxiliar + name.toString();
        break;
      case UNDERSCORE:
        name = jj_consume_token(UNDERSCORE);
           auxiliar = auxiliar + name.toString();
        break;
      case CAPSALPHABET:
        name = jj_consume_token(CAPSALPHABET);
           auxiliar = auxiliar + name.toString();
        break;
      case POINT:
        name = jj_consume_token(POINT);
           auxiliar = auxiliar + name.toString();
        break;
      case LOWER:
        name = jj_consume_token(LOWER);
           auxiliar = auxiliar + name.toString();
        break;
      case HIGHER:
        name = jj_consume_token(HIGHER);
           auxiliar = auxiliar + name.toString();
        break;
      case TWO_POINT:
        name = jj_consume_token(TWO_POINT);
           auxiliar = auxiliar + name.toString();
        break;
      case SLASH:
        name = jj_consume_token(SLASH);
           auxiliar = auxiliar + name.toString();
        break;
      case COUNTER_SLASH:
        name = jj_consume_token(COUNTER_SLASH);
           auxiliar = auxiliar + name.toString();
        break;
      case HYPHEN:
        name = jj_consume_token(HYPHEN);
           auxiliar = auxiliar + name.toString();
        break;
      case COMMA:
        name = jj_consume_token(COMMA);
           auxiliar = auxiliar + name.toString();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if (true) return auxiliar;}
    throw new Error("Missing return statement in function");
  }

  final public String rawString() throws ParseException {
  StringBuilder builder = new StringBuilder();
    jj_consume_token(QUOTE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case CNTRL_ESC:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      getChar(builder);
    }
    jj_consume_token(ENDQUOTE);
    {if (true) return builder.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void getChar(StringBuilder builder) throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case CNTRL_ESC:
      t = jj_consume_token(CNTRL_ESC);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (t.image.length() < 2)
    {
      // CHAR
      builder.append(t.image.charAt(0));
    }
    else if (t.image.length() < 6)
    {
      // ESC
      char c = t.image.charAt(1);
      switch (c)
      {
        case 'b': builder.append((char) 8); break;
        case 'f': builder.append((char) 12); break;
        case 'n': builder.append((char) 10); break;
        case 'r': builder.append((char) 13); break;
        case 't': builder.append((char) 9); break;
        default: builder.append(c);
      }
    }
  }

  /** Generated Token Manager. */
  public SSHConfigsReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x60000000,0x2000000,0xfff0000,0xfff0000,0x3000,0x3000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public SSHConfigsReader(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SSHConfigsReader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SSHConfigsReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SSHConfigsReader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SSHConfigsReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SSHConfigsReader(SSHConfigsReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SSHConfigsReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
